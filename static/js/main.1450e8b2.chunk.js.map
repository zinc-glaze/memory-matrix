{"version":3,"sources":["components/Navbar/index.js","components/Wrapper/index.js","components/Header/index.js","components/TileWrapper/index.js","components/GameTiles/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","id","className","onClick","resetGame","messageClass","message","score","highScore","Wrapper","children","Header","TileWrapper","GameTile","tileClass","tileClicked","name","clicked","alt","src","image","App","state","tiles","_this","map","tile","setState","synth","setTimeout","shuffleTiles","array","i","length","j","Math","floor","random","_ref","_this2","this","components_Navbar","components_Wrapper","components_Header","components_TileWrapper","GameTiles","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1450e8b2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <div id=\"navbar\">\r\n      <h3 className=\"nav-text\" id=\"restart\" onClick={() => props.resetGame()}>Reset Game</h3>\r\n      <h2 className={props.messageClass} id=\"message\">{props.message}</h2>\r\n      <h3 className=\"nav-text\" id=\"score\"><span>Score: {props.score}</span><span> | </span><span>High Score: {props.highScore}</span></h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return (\r\n    <div id=\"wrapper\">{ props.children }</div>\r\n  );\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div id=\"header\">\r\n      <h2  id=\"theme\">Vintage Synth</h2>\r\n      <h1 id=\"title\">MEMORY MATRIX</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction TileWrapper(props) {\r\n  return <div className=\"tile-wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default TileWrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction GameTile(props) {\r\n  return (\r\n    <div \r\n      className={props.tileClass}\r\n      onClick={() => props.tileClicked(props.id, props.name, props.clicked)}\r\n    >\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameTile;","import React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport TileWrapper from \"./components/TileWrapper\";\nimport GameTiles from \"./components/GameTiles\";\nimport tiles from \"./tiles.json\";\n\n\nclass App extends Component {\n\n  state = {\n    tiles,\n    tileClass: \"card\",\n    messageClass: \"nav-text\",\n    message: \"Click a tile to start!\",\n    score: 0,\n    highScore: 0,\n  };\n\n  resetGame = () => {\n    this.state.tiles.map(tile => tile.clicked = false);\n    this.setState({ \n      tiles,\n      tileClass: \"card\",\n      messageClass: \"nav-text\",\n      message: \"Click a tile to start!\",\n      score: 0,\n    });\n  };\n\n  //Handle Tile Click\n  tileClicked = (id, synth, clicked) => {\n    //if the tile has already been clicked\n    if (clicked === true) {\n      //message user, set high score, reset game after pause\n      this.setState({ message: \"Already Clicked! Try Again!\", tileClass: \"card wobble-hor-bottom\", messageClass: \"nav-text vibrate-1\" });\n      if (this.state.score > this.state.highScore) {\n        this.state.highScore = this.state.score; \n      }\n      setTimeout(() => {\n        this.resetGame();\n      }, 2500);\n    }\n    //if the tile has not been clicked\n    else if (clicked === false) {\n      //set tile to clicked\n      tiles[id - 1].clicked = true;\n      //message user, increase score\n      this.setState({ tiles, message: synth + \" -- Good Choice!\" });\n      this.state.score++;\n      //if user reaches max score\n      if (this.state.score === 12) {\n        //message user, set high score, reset game after pause\n        this.setState({ message: \"Congrats -- You Won!\", messageClass: \"nav-text vibrate-1\"})\n        this.state.highScore = this.state.score;\n        setTimeout(() => {\n          this.resetGame();\n        }, 3000); \n      }\n    }\n    // console.log(this.state.tiles);\n  };\n\n  //Shuffle function\n  shuffleTiles = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar\n          resetGame={this.resetGame}\n          message={this.state.message}\n          score={this.state.score}\n          highScore={this.state.highScore}\n          messageClass={this.state.messageClass}\n        />\n        <Wrapper>\n          <Header/>\n          <TileWrapper>\n            {this.shuffleTiles(this.state.tiles.map(tile => (\n              <GameTiles\n                tileClicked={this.tileClicked} \n                tileClass={this.state.tileClass}\n                id={tile.id}\n                key={tile.id}\n                name={tile.name}\n                image={tile.image}\n                clicked={tile.clicked}\n              />\n            )))}\n          </TileWrapper>\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}